1.a:

CREATE PROCEDURE `myPrecuder` (IN cusID INT)
BEGIN
SELECT 
    OrderID,
    (CASE
        WHEN ((UnitPrice * Quantity) > (AVG(UnitPrice) * Quantity)) THEN 'Profit'
        WHEN ((UnitPrice * Quantity) < (AVG(UnitPrice) * Quantity)) THEN 'Loss'
        WHEN ((UnitPrice * Quantity) = (AVG(UnitPrice) * Quantity)) THEN 'equivalent'
    END) AS 'Profit/Loss',
    (CASE
        WHEN ((UnitPrice * Quantity) > (AVG(UnitPrice) * Quantity)) THEN (UnitPrice * Quantity) - (AVG(UnitPrice) * Quantity)
        WHEN ((UnitPrice * Quantity) < (AVG(UnitPrice) * Quantity)) THEN (AVG(UnitPrice) * Quantity) - (UnitPrice * Quantity)
    END) AS 'Amount'
FROM
    orders AS o
        JOIN
    `order details` AS od ON o.OrderID = od.OrderID
WHERE
    o.CustomerID = cusID
ORDER BY OrderID; 

END


1.b:

java file 1b.java


2:

DELIMITER //
CREATE TRIGGER delEmp
AFTER DELETE ON employees
 FOR EACH ROW  
  
	delete from employeeterritories
    where EmployeeID = old.EmployeeID; 
    end//
DELIMITER ;

								 
3.a:

SELECT OrderId, RequiredDate 
FROM orders
WHERE shippedDate = null AND RequiredDate < NOW

3.b:

The purpose of the query is to get all the OrderId that don't have 
shippedDate and the estimated time of arrival has not yet passed.


4.a:

candidate keys:
                {A,B}
                {A,C}
                {C,D}
                {B,D}

4.b:

The normal form is NF3.
becasue we don't have NON-PRIME (NF3) and D isn't candidiate (thats why is only NF3 and not NF3.5).


### done ###